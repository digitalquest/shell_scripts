

# THIS IS NOT A SCRIPT
# COPY AND PASTE ONE LINE AFTER THE OTHER
# MAKE SURE A LINE EXECUTES WITHOUT ERROR BEFORE MOVING TO THE NEXT ONE
#
# Update Moodle from 1.8.1 to 1.9.3
#
# The basic process is:
# 1. Close the site 
# 2. Make a backup of the data and code changes 
# 3. Put the new code in place 
# 4. Run the database upgrade 
# 5. Open the site 

# one way of backing up Mahara database before update/upgrade 
# it works with our settings, as - once logged in - we do not provide username or password to use mysql
# feel free to use your prefered way of backing up your database
#
cd /data/backup
mv mahara-database.sql.gz mahara-database-old.sql.gz
#pg_dump db1 | gzip > mahara-database.sql.gz
pg_dump db1 > mahara-database.sql # will prompted for the password (stored in maharawwwdir/config.php)
gzip mahara-database.sql
#
# one should also create a backup of maharadata
# there are several method to achieve this so it's not covered here.

# change to Mahara directory
cd /data/www/html
# enable maintenance mode
#/usr/bin/php admin/cli/maintenance.php --enable
See http://manual.mahara.org/en/1.6/administration/overview.html#index-12
#
#BEGIN git SEQUENCE
#
# create an orphan branch called 19_GITORIOUS(a branch without parent commit)
# the branch won't be used; it's just to have a 'clean' start with no parent commit.
git checkout --orphan 19_GITORIOUS

# delete all the files in the working directory; they are not needed 
# working directory is now empty
git rm -rf . #the final 'dot' is important

# add Mahara official repo; name it upstream
git remote add upstream https://gitorious.org/mahara/mahara.git

# pull the branch 19_STABLE and tags from upstream
# working directory now contains the latest 1.9.x
git pull --tags upstream 1.9_STABLE

# version 1.9.3 is needed; we reset the HEAD to the corresponding commit
# the reset is important for the merge later
git reset --hard 1.9.3_RELEASE

# tidy up working directory
# because pulling from upstream created a htdocs directory
git mv htdocs/* . #final 'dot' is important
vi .gitignore     #edit and add lines to .gitignore as needed
rm -r htdocs/     #delete the htdos created when pulling from upstream

git add --all .   #add the new files to the staging area
git commit -m "prepare working directory with new release before merging our custom files"
#
# create branch MAHARA_193 and check it out
git checkout -b MAHARA_193

# Our Mahara 1.8.1 corresponds to the local branch 18_STABLE
# Mahara 1.9.3 corresponds to the local branch MAHARA_193; currently checked out.
# we merge both branches with the following options
# -s recursive or --strategy=recursive (see git documentation for possible stratgies)
# -X ours or --strategy-option=ours (in case of conflicts, priority is given to our branch [MAHARA_193 / v1.9.3])
git merge -s recursive -X ours 1.8_STABLE

# the current branch and the working directory now contain
# official Mahara 1.9.3 merged with all the customisation of our Mahara 1.8.1

# branch 18_STABLE is renamed MAHARA_181
git branch -m 1.8_STABLE MAHARA_181
# current branch (MAHARA_193) is renamed 19_STABLE
git branch -m 1.9_STABLE
# delete branch 19_GITORIOUS
git branch -d 19_GITORIOUS
#
git status
#change as needed
git add <file>
git commit -m "after update to 1.9.3"
# push our newly merged local branch. this will create branch 19_STABLE on origin
git push -u mahara_integration 1.9_STABLE
#
#END git SEQUENCE
#
# exucute Moodle upgrade script
#sudo -u apache /usr/bin/php admin/cli/upgrade.php
with your web browser, visit http://mahara-test.warwick.ac.uk/admin/upgrade.php
#/usr/bin/php admin/upgrade.php 

# disable maintenance mode - Note: in my case, was disabled when I ran the previous step
# so did not have to disable maintenance mode
# sudo -u apache /usr/bin/php admin/cli/maintenance.php --disable
See http://manual.mahara.org/en/1.6/administration/overview.html#index-12

# set up cron
# add the follwing line in the web server user's crontab:
# '* * * * * php /data/www/html/lib/cron.php >> /data/www/html/cron.log 2>&1'
# Or, in root's crontab (substitute apache with the web server user):
# '* * * * * apache php /data/www/html/lib/cron.php >> /data/www/html/cron.log 2>&1'